<?xml version="1.0" encoding="UTF-8"?>
<!--
    Common validation bean definitions.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
    default-lazy-init="true"
    xmlns:c="http://www.springframework.org/schema/c"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!--
        ***************************************
        ***                                 ***
        ***   U R L   V A L I D A T I O N   ***
        ***                                 ***
        ***************************************
    -->

    <!--
        Shared validator beans.

        The beans in this section have both "id" values by which they can
        be referenced in Spring configuration, but also simpler "p:id"
        values to simplify their contributions to error messages
        composed from a series of component ID values.
    -->

    <!-- Reject "https://host:/xxx" because libxml2 has issues with that. -->
    <bean id="validate_url_port" p:id="port" parent="mda.EmptyPortURLValidator"/>

    <!-- Reject "https:///xxx" because it lacks an authority entirely. -->
    <bean id="validate_url_host" p:id="host" parent="mda.MissingHostURLValidator"/>

    <!-- Reject URLs which don't have an https:// protocol. -->
    <bean id="validate_url_https" p:id="https" parent="mda.HTTPSProtocolURLValidator"/>

    <!--
        validate_url

        Validate a string as a URL. Includes checking for port and host
        issues.
    -->
    <bean id="validate_url" p:id="url" parent="mda.AsURLStringValidator">
        <property name="validators">
            <list>
                <ref bean="validate_url_port"/>
                <ref bean="validate_url_host"/>
            </list>
        </property>
    </bean>

    <!--
        validate_https_url

        Validate a string as a https:// URL. Includes checking for port and host
        issues.
    -->
    <bean id="validate_https_url" p:id="url" parent="mda.AsURLStringValidator">
        <property name="validators">
            <list>
                <ref bean="validate_url_https"/>
                <ref bean="validate_url_port"/>
                <ref bean="validate_url_host"/>
            </list>
        </property>
    </bean>

    <!--
        ***********************************
        ***                             ***
        ***   F U T U R E   T E S T S   ***
        ***                             ***
        ***********************************
    -->

    <!--
        The tests in this section are not applied to the UK federation metadata at the moment,
        but will be in the future.  Usually, the delay is due to the presence of the specific
        case in the current metadata, and the test will be moved into production once that
        has been cleaned up.  In some cases, this can be a lengthy process.

        The main check_future test is broken down into a number of sub-tests rather than
        just writing it as one long XSLT ruleset so that overlapping failures can all be
        seen at the same time.  This isn't so important in production, where any failure
        is definitive.  It's much more important while cleaning up existing metadata, where
        it's less productive to clear up one problem only to have another one emerge from
        hiding.
    -->

    <!--
        check_future_0
    -->
    <bean id="check_future_0" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_future_0.xsl"/>

    <!--
        check_future_1
    -->
    <bean id="check_future_1" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_future_1.xsl"/>

    <!--
        check_future_2
    -->
    <bean id="check_future_2" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_future_2.xsl"/>

    <!--
        check_future_3
    -->
    <bean id="check_future_3" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_future_3.xsl"/>

    <!--
        check_future_4
    -->
    <bean id="check_future_4" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_future_4.xsl"/>

    <!--
        check_future_5
    -->
    <bean id="check_future_5" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_future_5.xsl"/>

    <!--
        check_future_6
    -->
    <bean id="check_future_6" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_future_6.xsl"/>

    <!--
        check_future_7
    -->
    <bean id="check_future_7" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_future_7.xsl"/>

    <!--
        check_future_8
    -->
    <bean id="check_future_8" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_future_8.xsl"/>

    <!--
        check_future_9
    -->
    <bean id="check_future_9" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_future_9.xsl"/>

    <!--
        check_future

        Combines all check_future_N stages.
    -->
    <bean id="check_future" parent="mda.CompositeStage">
        <property name="stages">
            <list>
                <ref bean="check_future_0"/>
                <ref bean="check_future_1"/>
                <ref bean="check_future_2"/>
                <ref bean="check_future_3"/>
                <ref bean="check_future_4"/>
                <ref bean="check_future_5"/>
                <ref bean="check_future_6"/>
                <ref bean="check_future_7"/>
                <ref bean="check_future_8"/>
                <ref bean="check_future_9"/>
            </list>
        </property>
    </bean>


    <!--
        ***********************************************************
        ***                                                     ***
        ***   A L G S U P P O R T   S P E C I F I C A T I O N   ***
        ***                                                     ***
        ***********************************************************
    -->

    <!--
        check_algsupport
    -->
    <bean id="check_algsupport" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_algsupport.xsl"/>


    <!--
        ***************************************************
        ***                                             ***
        ***   M D A T T R   S P E C I F I C A T I O N   ***
        ***                                             ***
        ***************************************************
    -->

    <!--
        check_mdattr
    -->
    <bean id="check_mdattr" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_mdattr.xsl"/>


    <!--
        *************************************************
        ***                                           ***
        ***   M D R P I   S P E C I F I C A T I O N   ***
        ***                                           ***
        *************************************************
    -->

    <!--
        check_mdrpi_xslt

        Miscellaneous MDRPI tests, in XSLT.
    -->
    <bean id="check_mdrpi_xslt" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_mdrpi.xsl"/>

    <!--
        check_mdrpi

        Composite check for the MDRPI specification.
    -->
    <bean id="check_mdrpi" parent="mda.CompositeStage">
        <property name="stages">
            <list>
                <ref bean="check_mdrpi_xslt"/>
            </list>
        </property>
    </bean>

    <!--
        check_regauth_parent

        Parent (template) for per-channel beans.

        Any registrationAuthority already present on an entity in this
        channel must match the known registration authority value.
    -->
    <bean id="check_regauth_parent" abstract="true" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_regauth.xsl"/>

    <!--
        check_hasreginfo

        Check that each entity has an mdrpi:RegistrationInfo element.
    -->
    <bean id="check_hasreginfo" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_hasreginfo.xsl"/>


    <!--
        ***********************************************
        ***                                         ***
        ***   M D U I   S P E C I F I C A T I O N   ***
        ***                                         ***
        ***********************************************
    -->

    <!--
        check_mdui_iphint

        Checks for the mdui:IPHint element.
    -->
    <bean id="check_mdui_iphint" parent="mda.IPHintValidationStage"
        p:checkingNetworks="true"/>

    <!--
        check_mdui_xslt

        Miscellaneous MDUI tests, in XSLT.
    -->
    <bean id="check_mdui_xslt" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_mdui.xsl"/>

    <!--
        check_mdui_logo_url

        Section 2.1.5: Check the URL value of mdui:Logo elements.
    -->
    <bean id="check_mdui_logo_url" parent="mda.StringElementValidationStage">
        <property name="elementName" ref="mdui-Logo"/>
        <property name="validators">
            <list>
                <bean p:id="newline" parent="mda.RejectStringRegexValidator"
                    p:regex=".*\n.*"
                    p:message="mdui:Logo contains line break" />
                <bean p:id="nbs" parent="mda.RejectStringRegexValidator"
                    p:regex=".*\u00a0.*"
                    p:message="mdui:Logo contains non-breaking space" />
                <!-- Accept data: URLs with no further scrutiny. -->
                <bean parent="mda.AcceptStringRegexValidator"
                    p:regex="data:.*"/>
                <ref bean="validate_https_url"/>
            </list>
        </property>
    </bean>

    <!--
        check_mdui_logo_length

        Add a warning for mdui:Logo elements longer than some
        threshold.
    -->
    <bean id="check_mdui_logo_length" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_mdui_logo_length.xsl">
        <property name="transformParameters">
            <map>
                <entry key="maxLength" value="${mdui.logo.length.warn:40000}"/>
            </map>
        </property>
    </bean>

    <!--
        check_mdui_urls

        Check URL values of mdui:* elements other than mdui:Logo.
    -->
    <bean id="check_mdui_urls" parent="mda.StringElementValidationStage"
        p:validators-ref="validate_url">
        <property name="elementNames">
            <set>
                <ref bean="mdui-InformationURL"/>
                <ref bean="mdui-PrivacyStatementURL"/>
            </set>
        </property>
    </bean>

    <!--
        check_mdui

        Composite check for the MDUI specification.
    -->
    <bean id="check_mdui" parent="mda.CompositeStage">
        <property name="stages">
            <list>
                <ref bean="check_mdui_iphint"/>
                <ref bean="check_mdui_xslt"/>
                <ref bean="check_mdui_logo_length"/>
                <ref bean="check_mdui_logo_url"/>
                <ref bean="check_mdui_urls"/>
            </list>
        </property>
    </bean>


    <!--
        *******************************************************************
        ***                                                             ***
        ***   I N C O M M O N   F E D E R A T I O N   M E T A D A T A   ***
        ***                                                             ***
        *******************************************************************
    -->

    <!--
        check_incmd
    -->
    <bean id="check_incmd" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_incmd.xsl"/>


    <!--
        ***********************************************************
        ***                                                     ***
        ***   R E F E D S   R + S   S P E C I F I C A T I O N   ***
        ***                                                     ***
        ***********************************************************
    -->

    <bean id="check_rands_member" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_rands_member.xsl"/>

    <bean id="check_rands_support" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_rands_support.xsl"/>

    <bean id="check_rands" parent="mda.CompositeStage">
        <property name="stages">
            <list>
                <ref bean="check_rands_member"/>
                <ref bean="check_rands_support"/>
            </list>
        </property>
    </bean>

    <!--
        ******************************************************************
        ***                                                            ***
        ***   R E F E D S   C o C o   v2   S P E C I F I C A T I O N   ***
        ***                                                            ***
        ******************************************************************
    -->

    <bean id="check_coco_v2_support" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_coco_v2_support.xsl"/>

    <bean id="check_coco_v2_ec" parent="mda.XSLValidationStage"
          p:XSLResource="classpath:_rules/check_coco_v2_ec.xsl"/>

    <bean id="check_coco_v2" parent="mda.CompositeStage">
        <property name="stages">
            <list>
                <ref bean="check_coco_v2_support"/>
                <ref bean="check_coco_v2_ec"/>
            </list>
        </property>
    </bean>

    <!--
        *********************************************************************************************************
        ***                                                                                                   ***
        ***   R E F E D S   P E R S O N A L I Z E D,   A N O N Y M O U S,   A N D   P S E U D O N Y M O U S   ***
        ***   E N T I T Y   C A T E G O R Y  S P E C I F I C A T I O N                                        ***
        ***                                                                                                   ***
        *********************************************************************************************************
    -->

    <!--
        check_ec_anonymous
    -->
    <bean id="check_mdattr_ec_anonymous" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_mdattr_ec_anonymous.xsl"/>

    <!--
        check_ec_personalized
    -->
    <bean id="check_mdattr_ec_personalized" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_mdattr_ec_personalized.xsl"/>

    <!--
        check_ec_pseudonymous
    -->
    <bean id="check_mdattr_ec_pseudonymous" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_mdattr_ec_pseudonymous.xsl"/>


    <!--
        ***********************************************************
        ***                                                     ***
        ***   S H I B B O L E T H   S P E C I F I C A T I O N   ***
        ***                                                     ***
        ***********************************************************
    -->

    <!--
        check_shib_regscope

        Check for regular expressions in Shibboleth Scope elements.  Applied very selectively,
        because we do permit this in certain circumstances.
    -->
    <bean id="check_shib_regscope" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_shib_regscope.xsl"/>

    <!--
        check_shib_noregscope

        Check for Shibboleth Scope elements lacking a regexp attribute, which can cause
        problems with signature generation and validation because the schema includes
        a default value.
    -->
    <bean id="check_shib_noregscope" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_shib_noregscope.xsl"/>

    <!--
        check_shibboleth
    -->
    <bean id="check_shibboleth" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_shibboleth.xsl"/>


    <!--
        ***************************************************
        ***                                             ***
        ***   S I R T F I   S P E C I F I C A T I O N   ***
        ***                                             ***
        ***************************************************
    -->

    <!--
        check_sirtfi
    -->
    <bean id="check_sirtfi" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_sirtfi.xsl"/>


    <!--
        *******************************************************************
        ***                                                             ***
        ***   U K   F E D E R A T I O N   S P E C I F I C A T I O N S   ***
        ***                                                             ***
        *******************************************************************
    -->

    <!--
        check_uk_algorithms
    -->
    <bean id="check_uk_algorithms" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_uk_algorithms.xsl"/>

    <!--
        check_uk_trust
    -->
    <bean id="check_uk_trust" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_uk_trust.xsl"/>


    <!--
        *******************************************************
        ***                                                 ***
        ***   C O L L E C T I O N   C O N S I S T E N C Y   ***
        ***                                                 ***
        *******************************************************
    -->

    <!--
        These checks are for consistency across a collection of entities
        rather than on each entity independently.
    -->

    <!--
        check_aggregate

        Checks for duplicate entityID values across a set of entities.

        It is assumed that the entities are wrapped in a single EntitiesDescriptor.
    -->
    <bean id="check_aggregate" parent="mda.DuplicateEntityInAggregateCheckingStage"/>

    <!--
        check_dup_display

        Checks for duplicate identity provider display names across a set of entities.

        It is assumed that the entities are independently represented as EntityDescriptor
        items in the item collection.
    -->
    <bean id="check_dup_display" parent="ukf.IdPDisplayNameDuplicateDetectingStage"
        p:identificationStrategy-ref="identificationStrategy"/>


    <!--
        ***********************************************
        ***                                         ***
        ***   X . 5 0 9   C E R T I F I C A T E S   ***
        ***                                         ***
        ***********************************************
    -->

    <!--
        Debian weak key lists.
    -->

    <bean id="debian.1024" parent="mda.X509RSAOpenSSLKeylistValidator"
        p:keySize="1024"
        p:keylistResource="classpath:net/shibboleth/metadata/keylists/rsa/legacy/debian-1024.txt"/>

    <bean id="debian.2048" parent="mda.X509RSAOpenSSLKeylistValidator"
        p:keySize="2048"
        p:KeylistResource="classpath:net/shibboleth/metadata/keylists/rsa/debian-2048.txt"/>

    <bean id="debian.4096" parent="mda.X509RSAOpenSSLKeylistValidator"
        p:keySize="4096"
        p:keylistResource="classpath:net/shibboleth/metadata/keylists/rsa/debian-4096.txt"/>

    <!--
        List of known compromised 1024-bit keys, e.g., "dummy" keys shipped with
        SAML products that are sometimes deployed by accident.
    -->
    <bean id="compromised.1024" parent="mda.X509RSAOpenSSLKeylistValidator"
        p:keySize="1024"
        p:keylistResource="classpath:net/shibboleth/metadata/keylists/rsa/legacy/compromised-1024.txt"/>

    <!--
        List of known compromised 2048-bit keys, e.g., "dummy" keys shipped with
        SAML products that are sometimes deployed by accident.
    -->
    <bean id="compromised.2048" parent="mda.X509RSAOpenSSLKeylistValidator"
        p:keySize="2048"
        p:keylistResource="classpath:net/shibboleth/metadata/keylists/rsa/compromised-2048.txt"/>

    <!--
        check_standard_certificates

        Perform a group of standard checks on X.509 certificates.
    -->
    <bean id="check_standard_certificates" parent="mda.X509ValidationStage">
        <property name="validators">
            <list>
                <!-- Error on DSA keys. -->
                <bean p:id="DSA" parent="mda.X509DSADetector"/>

                <!-- Error on RSA key length less than 2048 bits. -->
                <bean p:id="RSAKeyLength" parent="mda.X509RSAKeyLengthValidator"
                    p:warningBoundary="0" p:errorBoundary="2048"/>
                <!-- Error on small RSA public exponents. -->
                <bean p:id="RSAExponent" parent="mda.X509RSAExponentValidator"/>
                <!-- Error on keys vulnerable to ROCA. -->
                <bean p:id="ROCA" parent="mda.X509ROCAValidator"/>

                <!--
                    Debian weak key blacklists.

                    Don't need to check for keys below our minimum key size.
                -->
                <ref bean="debian.2048"/>
                <ref bean="debian.4096"/>

                <!--
                    Compromised key blacklists.

                    Again, don't need to check for keys below our minimum key size.
                -->
                <ref bean="compromised.2048"/>
            </list>
        </property>
    </bean>

    <!--
        ****************************************************
        ***                                              ***
        ***   S A M L 2   M E T A D A T A   C H E C K S  ***
        ***                                              ***
        ****************************************************
    -->


    <!--
        check_saml2_lang
    -->
    <bean id="check_saml2_lang" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_saml2_lang.xsl"/>


    <!--
        check_saml2_sp_signedrequests
    -->
    <bean id="check_saml2_sp_signedrequests" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_saml2_sp_signedrequests.xsl"/>


    <!--
        ***************************************************
        ***                                             ***
        ***   M I S C E L L A N E O U S   C H E C K S   ***
        ***                                             ***
        ***************************************************
    -->

    <!--
        check_adfs
    -->
    <bean id="check_adfs" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_adfs.xsl"/>

    <!--
        check_bindings
    -->
    <bean id="check_bindings" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_bindings.xsl"/>

    <!--
        check_filtered
    -->
    <bean id="check_filtered" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_filtered.xsl"/>

    <!--
        check_hoksso
    -->
    <bean id="check_hoksso" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_hoksso.xsl"/>

    <!--
        check_idpdisc
    -->
    <bean id="check_idpdisc" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_idpdisc.xsl"/>

    <!--
        check_imported
    -->
    <bean id="check_imported" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_imported.xsl"/>

    <!--
        check_init
    -->
    <bean id="check_init" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_init.xsl"/>

    <!--
        check_mdiop
    -->
    <bean id="check_mdiop" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_mdiop.xsl"/>

    <!--
        check_cr

        Check for the presence of CR characters in text content or attribute values.
        This protects against SSPCPP-684 in the Shibboleth SP.
    -->
    <bean id="check_cr" parent="mda.CRDetectionStage"/>

    <!--
        check_entityid_prefix
    -->
    <bean id="check_entityid_prefix" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_entityid_prefix.xsl"/>

    <!--
        check_idp_tls
    -->
    <bean id="check_idp_tls" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_idp_tls.xsl"/>

    <!--
        check_sp_tls
    -->
    <bean id="check_sp_tls" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_sp_tls.xsl"/>

    <!--
        check_misc
    -->
    <bean id="check_misc" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_misc.xsl"/>

    <!--
        check_namespaces
    -->
    <bean id="check_namespaces" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_namespaces.xsl"/>

    <!--
        check_reqattr
    -->
    <bean id="check_reqattr" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_reqattr.xsl">
        <property name="transformAttributes">
            <map>
                <entry key="jdk.xml.xpathExprOpLimit" value="0"/>
            </map>
        </property>
    </bean>

    <!--
        check_saml2int
    -->
    <bean id="check_saml2int" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_saml2int.xsl"/>

    <!--
        check_saml1
    -->
    <bean id="check_saml1" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_saml1.xsl"/>

    <!--
        check_saml2
    -->
    <bean id="check_saml2" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_saml2.xsl"/>

    <!--
        check_saml2meta
    -->
    <bean id="check_saml2meta" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_saml2meta.xsl"/>

    <!--
        check_saml2meta_urlattrs

        Check URL values of various attributes on md:* elements.
    -->
    <bean id="check_saml2meta_urlattrs" parent="mda.StringAttributeValidationStage"
        p:id="saml2meta" p:validators-ref="validate_url">
        <property name="elementNames">
            <set>
                <ref bean="md-AdditionalMetadataLocation"/>
                <ref bean="md-AssertionConsumerService"/>
                <ref bean="md-AssertionIDRequestService"/>
                <ref bean="md-ArtifactResolutionService"/>
                <ref bean="md-AttributeService"/>
                <ref bean="md-AuthnQueryService"/>
                <ref bean="md-AuthzService"/>
                <ref bean="md-ManageNameIDService"/>
                <ref bean="md-NameIDMappingService"/>
                <ref bean="md-SingleLogoutService"/>
                <ref bean="md-SingleSignOnService"/>
            </set>
        </property>
        <property name="attributeNames">
            <set>
                <bean parent="QName" c:_0="Location"/>
                <bean parent="QName" c:_0="ResponseLocation"/>
            </set>
        </property>
    </bean>

    <!--
        check_saml2meta_urls

        Check URL values of md:* elements.
    -->
    <bean id="check_saml2meta_urls" parent="mda.StringElementValidationStage"
        p:id="saml2meta" p:validators-ref="validate_url"
        p:elementName-ref="md-OrganizationURL"/>

    <!--
        check_saml_strings
    -->
    <bean id="check_saml_strings" parent="mda.SAMLStringElementCheckingStage">
        <property name="elementNames">
            <set>
                <ref bean="md-AttributeProfile"/>
                <ref bean="md-Company"/>
                <ref bean="md-GivenName"/>
                <ref bean="md-OrganizationDisplayName"/>
                <ref bean="md-OrganizationName"/>
                <ref bean="md-ServiceDescription"/>
                <ref bean="md-ServiceName"/>
                <ref bean="md-SurName"/>
                <ref bean="md-TelephoneNumber"/>
                <ref bean="md-NameIDFormat" />

                <ref bean="mdui-Description"/>
                <ref bean="mdui-DisplayName"/>
                <ref bean="mdui-DomainHint"/>
                <ref bean="mdui-GeolocationHint"/>
                <ref bean="mdui-IPHint"/>
                <ref bean="mdui-Keywords"/>

                <ref bean="shibmd-Scope"/>
            </set>
        </property>
    </bean>

    <!--
        check_validUntil

        Check that an aggregate has a validUntil instant specified, and that it has not
        yet expired.  Does not put an upper bound on validUntil intervals.
    -->
    <bean id="check_validUntil" parent="mda.ValidateValidUntilStage">
        <!--
            The validUntil attribute must be present.
        -->
        <property name="requireValidUntil" value="true"/>
        <!--
            Do not constrain the validity interval in this general stage.
            Constrain if necessary on a per-channel basis.
        -->
        <property name="maxValidityInterval" value="0"/>
    </bean>

    <!--
        check_vhosts
    -->
    <bean id="check_vhosts" parent="mda.XSLValidationStage"
        p:XSLResource="classpath:_rules/check_vhosts.xsl"/>

</beans>
